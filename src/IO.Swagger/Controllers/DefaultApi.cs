/*
 * Calculator API
 *
 * API for performing mathematical operations
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Security.Claims;
using System.Text;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Authenticate user and retrieve JWT token
        /// </summary>
        /// <remarks>Authenticate user based on username and password and return JWT token</remarks>
        /// <param name="body"></param>
        /// <response code="200">Successful authentication</response>
        [HttpPost]
        [Route("/DAVIDVR3/MyApi/1.0.0/authenticate")]
        [ValidateModelState]
        [SwaggerOperation("AuthenticatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Successful authentication")]
        public virtual IActionResult AuthenticatePost([FromBody]AuthenticateBody body)
        {
            

            if (body.Username.ToLower()!= "david" && body.Password.ToLower()!="varshoer")
                return Unauthorized();

            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(Guid.NewGuid().ToString()); // Change this to your secret key
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, body.Username),
                    new Claim(ClaimTypes.Surname, body.Password),
                    new Claim(ClaimTypes.Expiration,DateTime.Now.AddHours(1).ToString())
                    // Add more claims as needed
                }),
                Expires = DateTime.UtcNow.AddHours(1), // Token expiration time
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            var tokenString = tokenHandler.WriteToken(token);

            return Ok(new { Token = tokenString });
        }

        /// <summary>
        /// Perform mathematical operation
        /// </summary>
        /// <remarks>Perform addition or subtraction or multiply or devide on two numbers</remarks>
        /// <param name="body"></param>
        /// <param name="action">Action to perform (e.g., add, subtract,multi,devide)</param>
        /// <response code="200">Successful operation</response>
        [HttpPost]
        [Route("/DAVIDVR3/MyApi/1.0.0/calculate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CalculatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "Successful operation")]
        public virtual IActionResult CalculatePost([FromBody]CalculateBody body, [FromHeader][Required()]string action)
        {
            decimal? resault = 0;            
            switch (action.ToLower())
            {
                case "add":
                    resault = body.Number1 + body.Number2;
                    break;
                case "substruct":
                    resault = body.Number1 - body.Number2;
                    break;
                case "multiply":
                    resault = body.Number1 * body.Number2;
                    break;
                case "devide":
                    resault = body.Number1 / body.Number2;
                    break;
                default:
                    return BadRequest("no such action exist");
            }
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : "+ resault +"\n}";

            var example = JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson);
                        
            return new ObjectResult(example);
        }
    }
}
